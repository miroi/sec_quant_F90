cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

# suppress Windows warning about policy
cmake_policy(SET CMP0010 OLD)

# do not rebuild if rules (compiler flags) change
set(CMAKE_SKIP_RULE_DEPENDENCY TRUE)

project(SecQuantF90 Fortran)

option(ENABLE_64BIT_INTEGERS  "Enable 64-bit integers"                                    OFF)
option(ENABLE_MPI             "Enable MPI parallelization"                                OFF)
option(ENABLE_SGI_MPT         "Enable SGI MPT parallelization"                            OFF)
option(ENABLE_MPI2_DETECTION  "Enable detection of MPI-2 standard"                        ON)
option(ENABLE_BOUNDS_CHECK    "Enable bounds check"                                       OFF)
option(ENABLE_CODE_COVERAGE   "Enable code coverage"                                      OFF)
option(ENABLE_STATIC_LINKING  "Enable static libraries linking"                           OFF)
option(ENABLE_OLD_LINKER      "Enable static linking with older linkers"                  OFF) 
option(ENABLE_XHOST_FLAG_DETECTION "Enable xHost flag detection for Intel compilers"      OFF) 
option(ENABLE_UTILITIES       "Enable utilities"                                          ON)
option(ENABLE_SANITY_CHECKS   "Enable configure-time sanity checks"                       ON)
option(ENABLE_CRAY_WRAPPERS   "Enable cray wrappers for BLAS/LAPACK and MPI"              OFF)
option(ENABLE_BENCHMARKS      "Enable benchmarks within the test suite"                   OFF)
option(ENABLE_TUTORIALS       "Enable tutorials within the test suite"                    OFF)

set(CMAKE_MODULE_PATH
    ${CMAKE_MODULE_PATH}
    ${CMAKE_SOURCE_DIR}/cmake
    ${CMAKE_SOURCE_DIR}/cmake/binary-info
    ${CMAKE_SOURCE_DIR}/cmake/compilers
    ${CMAKE_SOURCE_DIR}/cmake/math
    ${CMAKE_SOURCE_DIR}/cmake/mpi
    ${CMAKE_SOURCE_DIR}/cmake/testing
    ${CMAKE_SOURCE_DIR}/cmake/testing/autogenerated
    )

if(ENABLE_STATIC_LINKING)
    if (NOT ENABLE_OLD_LINKER)
       # Miro: the "-Wl,--no-export-dynamic" flag is only for newer
       # ld-linkers, fix for older linkers
       set(NODYNEXPORT "-Wl,--no-export-dynamic")
    endif()
    if(CMAKE_Fortran_COMPILER_ID MATCHES PGI)
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Bstatic ${NODYNEXPORT}")
    else()
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static ${NODYNEXPORT}")
    endif()
    set(CMAKE_FIND_LIBRARY_SUFFIXES .a)
endif()

set(EXTERNAL_LIBS)

include(ConfigVersion)
include(ConfigArchitecture)
#include(ConfigPamadm)

#include(Sources) # this has to come before ConfigCompilerFlags
set(FREE_FORTRAN_SOURCES
    src/control_print.F90
    src/evaluare_strings.F90
    src/indexed_quantities.F90
    src/kron_delta.F90
    src/operators_string.F90
    src/sec_quant_oper.F90
    src/dynamic_string.F90
    src/utils.F90
)

include(ConfigCompilerFlags)
include(ConfigDocumentation)
include(ConfigExternal)
#include(ConfigGPU)
#include(ConfigOMP)

#include(ConfigMPI)
include(ConfigSafeGuards)
include(GenericMacros)
include(BinaryInfo) # has to come after ConfigVersion

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/lib
    )

set(CMAKE_Fortran_MODULE_DIRECTORY
    ${PROJECT_BINARY_DIR}/modules
    )

#include(Definitions)

if(ENABLE_64BIT_INTEGERS)
    add_definitions(-DINT_STAR8)
endif()
# forward CPP directly to the code
set(CPP)
if(NOT "${CPP}" STREQUAL "")
    add_definitions(${CPP})
endif()

set(SECQUANT_SOURCES
    ${FREE_FORTRAN_SOURCES}
    )

add_library(
    secquant
    ${SECQUANT_SOURCES}
    ${GENERATED_FILES}
    )

set(LIST_OF_EXECUTABLES)
macro(compile_standalone _executable _source LIST_OF_EXECUTABLES)
    add_executable(
        ${_executable}
        ${_source}
    )
    set_property(TARGET ${_executable} PROPERTY LINKER_LANGUAGE Fortran)
    set(LIST_OF_EXECUTABLES
        ${LIST_OF_EXECUTABLES}
        ${_executable}
    )
endmacro()

compile_standalone(secquant.x src/main.F90 "${LIST_OF_EXECUTABLES}")

foreach(
    EXECUTABLE
    ${LIST_OF_EXECUTABLES}
    )
    if(${CMAKE_SYSTEM_NAME} STREQUAL "AIX")
        SET_TARGET_PROPERTIES(${EXECUTABLE} PROPERTIES LINK_FLAGS "-Wl,-bbigtoc")
    endif()
    if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
        SET_TARGET_PROPERTIES(${EXECUTABLE} PROPERTIES LINK_FLAGS "-Wl,-E")
    endif()
    target_link_libraries(
        ${EXECUTABLE}
        secquant
        ${EXTERNAL_LIBS}
        )

    if(ENABLE_STATIC_LINKING)
        target_link_libraries(${EXECUTABLE} ${NODYNEXPORT})
    endif()

endforeach()

# give a nice message at the end
include(Motivation)
get_motivational_message(${DEVELOPMENT_CODE} msg)
add_custom_target(final ALL COMMENT "Compilation successfully completed - ${msg}")
set(_list_of_all_targets ${LIST_OF_EXECUTABLES})
add_dependencies(final ${_list_of_all_targets})
unset(_list_of_all_targets)

include(ConfigTesting)
#include(ConfigPackaging)

# give information about system, compiler flags, and size of static allocations
set(STATIC_MEM_INFO_BINARIES secquant)
include(ConfigInfo)
